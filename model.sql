-- MySQL Script generated by MySQL Workbench
-- mer 24 ago 2022, 17:30:41
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema sistemaAsteOnline
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `sistemaAsteOnline` ;

-- -----------------------------------------------------
-- Schema sistemaAsteOnline
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `sistemaAsteOnline` ;
USE `sistemaAsteOnline` ;

-- -----------------------------------------------------
-- Table `sistemaAsteOnline`.`Categoria1`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistemaAsteOnline`.`Categoria1` ;

CREATE TABLE IF NOT EXISTS `sistemaAsteOnline`.`Categoria1` (
  `Nome` VARCHAR(20) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  PRIMARY KEY (`Nome`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `sistemaAsteOnline`.`Categoria2`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistemaAsteOnline`.`Categoria2` ;

CREATE TABLE IF NOT EXISTS `sistemaAsteOnline`.`Categoria2` (
  `Nome` VARCHAR(20) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  `NomeCategoria1` VARCHAR(20) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NULL DEFAULT NULL,
  PRIMARY KEY (`Nome`),
  CONSTRAINT `fk_Categoria2_Categoria1`
    FOREIGN KEY (`NomeCategoria1`)
    REFERENCES `sistemaAsteOnline`.`Categoria1` (`Nome`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `fk_Categoria2_Categoria1_idx` ON `sistemaAsteOnline`.`Categoria2` (`NomeCategoria1` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `sistemaAsteOnline`.`Categoria3`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistemaAsteOnline`.`Categoria3` ;

CREATE TABLE IF NOT EXISTS `sistemaAsteOnline`.`Categoria3` (
  `Nome` VARCHAR(20) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  `NomeCategoria2` VARCHAR(20) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NULL DEFAULT NULL,
  PRIMARY KEY (`Nome`),
  CONSTRAINT `fk_Categoria3_Categoria2`
    FOREIGN KEY (`NomeCategoria2`)
    REFERENCES `sistemaAsteOnline`.`Categoria2` (`Nome`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `fk_Categoria3_Categoria2_idx` ON `sistemaAsteOnline`.`Categoria3` (`NomeCategoria2` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `sistemaAsteOnline`.`login`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistemaAsteOnline`.`login` ;

CREATE TABLE IF NOT EXISTS `sistemaAsteOnline`.`login` (
  `CF` CHAR(16) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  `psw` VARCHAR(20) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  `user` ENUM('amministratore', 'base') CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  PRIMARY KEY (`CF`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `sistemaAsteOnline`.`utenteAmministratore`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistemaAsteOnline`.`utenteAmministratore` ;

CREATE TABLE IF NOT EXISTS `sistemaAsteOnline`.`utenteAmministratore` (
  `CF` CHAR(16) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  `Nome` VARCHAR(20) CHARACTER SET 'utf8mb3' NOT NULL,
  `Cognome` VARCHAR(20) CHARACTER SET 'utf8mb3' NOT NULL,
  PRIMARY KEY (`CF`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `sistemaAsteOnline`.`oggettoAllAsta`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistemaAsteOnline`.`oggettoAllAsta` ;

CREATE TABLE IF NOT EXISTS `sistemaAsteOnline`.`oggettoAllAsta` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Descrizione` VARCHAR(30) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NULL DEFAULT NULL,
  `Nome` VARCHAR(20) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  `Categoria` VARCHAR(20) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NULL DEFAULT NULL,
  `Stato` VARCHAR(20) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  `Colore` VARCHAR(16) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NULL DEFAULT NULL,
  `Espositore` CHAR(16) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  `Dimensioni` VARCHAR(10) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NULL DEFAULT NULL,
  `PrezzoBase` FLOAT(7,2) NOT NULL,
  `NOfferte` INT NOT NULL DEFAULT '0',
  `MaxOfferta` FLOAT(5,2) NULL DEFAULT 0.00,
  `MigliorOfferente` CHAR(16) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NULL DEFAULT NULL,
  `ImportoControffertaMax` FLOAT(5,2) NULL DEFAULT '0.00',
  `Scadenza` TIMESTAMP(5) NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_Oggetto all'Asta_Categoria_3`
    FOREIGN KEY (`Categoria`)
    REFERENCES `sistemaAsteOnline`.`Categoria3` (`Nome`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `fk_OggettoAllAsta_Espositore`
    FOREIGN KEY (`Espositore`)
    REFERENCES `sistemaAsteOnline`.`utenteAmministratore` (`CF`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `fk_categoria_3_idx` ON `sistemaAsteOnline`.`oggettoAllAsta` (`Categoria` ASC) VISIBLE;

CREATE INDEX `fk_oggettoAllAsta_Espositore_1_idx` ON `sistemaAsteOnline`.`oggettoAllAsta` (`Espositore` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `sistemaAsteOnline`.`utenteBase`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistemaAsteOnline`.`utenteBase` ;

CREATE TABLE IF NOT EXISTS `sistemaAsteOnline`.`utenteBase` (
  `CF` CHAR(16) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  `Nome` VARCHAR(20) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  `Cognome` VARCHAR(20) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  `DataNascita` DATE NOT NULL,
  `CittaNascita` VARCHAR(20) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  `NCarta` VARCHAR(20) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  `ScadenzaCarta` CHAR(16) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  `Cvv` CHAR(16) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  `IndirizzoConsegna` VARCHAR(30) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  PRIMARY KEY (`CF`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `sistemaAsteOnline`.`offerta`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistemaAsteOnline`.`offerta` ;

CREATE TABLE IF NOT EXISTS `sistemaAsteOnline`.`offerta` (
  `Utente` CHAR(16) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_0900_ai_ci' NOT NULL,
  `Oggetto` INT NOT NULL,
  `Istante` TIMESTAMP(5) NOT NULL DEFAULT CURRENT_TIMESTAMP(5) ON UPDATE CURRENT_TIMESTAMP(5),
  `Importo` FLOAT(5,2) NOT NULL,
  `Automatica` INT NOT NULL DEFAULT '0',
  `ImportoControfferta` FLOAT(5,2) NULL DEFAULT NULL,
  PRIMARY KEY (`Utente`, `Oggetto`, `Istante`),
  CONSTRAINT `fk_oggetto_1`
    FOREIGN KEY (`Oggetto`)
    REFERENCES `sistemaAsteOnline`.`oggettoAllAsta` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fk_utente_1`
    FOREIGN KEY (`Utente`)
    REFERENCES `sistemaAsteOnline`.`utenteBase` (`CF`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci
KEY_BLOCK_SIZE = 1;

CREATE INDEX `utente_base_idx` ON `sistemaAsteOnline`.`offerta` (`Utente` ASC) VISIBLE;

CREATE INDEX `oggetto_idx` ON `sistemaAsteOnline`.`offerta` (`Oggetto` ASC) VISIBLE;

USE `sistemaAsteOnline` ;

-- -----------------------------------------------------
-- Placeholder table for view `sistemaAsteOnline`.`titolario_gerarchico_lower`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sistemaAsteOnline`.`titolario_gerarchico_lower` (`Nome` INT, `Padre` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sistemaAsteOnline`.`titolario_gerarchico_upper`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sistemaAsteOnline`.`titolario_gerarchico_upper` (`Nome` INT, `Padre` INT);

-- -----------------------------------------------------
-- procedure aggiornamento_categoria
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`aggiornamento_categoria`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `aggiornamento_categoria`(in old_nome_categoria varchar(20), in new_nome_categoria varchar(20), in old_nome_padre varchar(20), in new_nome_padre varchar (20) )
BEGIN
	declare var_compara_nome varchar(20);
	declare var_compara_nomepadre varchar(20);
	declare exit handler for sqlexception
	BEGIN
		rollback;
		resignal;
	END;
	
	start transaction;
	# check sulle variabili di ingresso indispensabili all'esecuzione della procedura
	IF `old_nome_categoria` = '' OR  `old_nome_categoria` IS NULL THEN
		signal sqlstate '45005'
		set message_text = "E' necessario fornire il nome della categoria per cercarla nel titolario.";
	END IF;

	#verifica l"esistenza della categoria da modificare, cercandola nei tre livelli del titolario.
	#LIVELLO 1, RICERCA.
	SELECT `Nome` FROM `Categoria1` WHERE `Nome` = `old_nome_categoria` INTO var_compara_nome;
	IF var_compara_nome IS NULL THEN # chiave non trovata al primo livello!
		#LIVELLO2, RICERCA.
		SELECT `Nome` FROM `Categoria2` WHERE `Nome` = `old_nome_categoria` INTO var_compara_nome;
		IF var_compara_nome IS NULL THEN #chiave non trovata al secondo livello!
			#LIVELLO3, RICERCA.
			SELECT `Nome` FROM `Categoria3` WHERE `Nome` = `old_nome_categoria` INTO var_compara_nome;
			IF var_compara_nome IS NULL THEN #chiave non presente nel titolario!
				signal sqlstate '45002'
				set message_text = "Questa categoria non esiste.";
			END IF;
		
			IF var_compara_nome IS NOT NULL THEN #chiave trovata al terzo livello.
				IF `new_nome_padre` IS NULL OR `new_nome_padre` = '' THEN
					IF `new_nome_categoria` = '' OR `new_nome_categoria` IS NULL THEN
						signal sqlstate '45004'
						set message_text = "Non si può aggiornare a valore nullo il nome di una categoria.";
					END IF;
	
    					#si vuole aggiornare solo il nome della categoria.
					UPDATE `Categoria3` set `Nome` = `new_nome_categoria` WHERE `Nome` = `old_nome_categoria`;
				END IF;
		
				IF `new_nome_padre` IS NOT NULL THEN

					#se non esiste la categoria di livello 2,ERRORE
					SELECT `Nome` FROM `Categoria2` WHERE `Nome`=`new_nome_padre` INTO var_compara_nomepadre;
					IF var_compara_nomepadre IS NULL THEN
						signal sqlstate '45007'
						set message_text = "Attenzione, non esiste la categoria padre indicata al livello 2 del titolario!";
					END IF;
                   
                    IF `new_nome_categoria` IS NULL THEN
						IF `old_nome_padre` IS NULL THEN
							UPDATE `Categoria3` set `NomeCategoria2` = `new_nome_padre` WHERE `Nome` = `old_nome_categoria`;
						END IF;
                        IF `old_nome_padre` IS NOT NULL THEN
							UPDATE `Categoria3` set `NomeCategoria2` = `new_nome_padre` WHERE `Nome` = `old_nome_categoria` AND `NomeCategoria2` = `old_nome_padre`;
						END IF;
					END IF;
				END IF;
				set var_compara_nome = null;
			END IF;
		END IF;
		IF var_compara_nome IS NOT NULL THEN #chiave trovata al secondo livello!
			IF `new_nome_padre` IS NULL OR `new_nome_padre` = '' THEN
				IF `new_nome_categoria` IS NULL OR `new_nome_categoria` = '' THEN
					signal sqlstate '45004'
					set message_text = "Non si può aggiornare a valore nullo il nome di una categoria.";
				END IF;

				#si vuole aggiornare solo il nome della categoria.
				UPDATE `Categoria2` set `Nome` = `new_nome_categoria` WHERE `Nome` = `old_nome_categoria`;
			END IF;
			IF `new_nome_padre` IS NOT NULL THEN

				#se non esiste la categoria di livello 1, ERRORE
				SELECT `Nome` FROM `Categoria1` WHERE `Nome`=`new_nome_padre` INTO var_compara_nomepadre;
				IF var_compara_nomepadre IS NULL THEN
					signal sqlstate '45007'
					set message_text = "Attenzione, non esiste la categoria padre indicata al livello 1 del titolario!";
				END IF;
                IF `new_nome_categoria` IS NULL THEN
						IF `old_nome_padre` IS NULL THEN
							UPDATE `Categoria2` set `NomeCategoria1` = `new_nome_padre` WHERE `Nome` = `old_nome_categoria`;
						END IF;
                        IF `old_nome_padre` IS NOT NULL THEN
							UPDATE `Categoria2` set `NomeCategoria1` = `new_nome_padre` WHERE `Nome` = `old_nome_categoria` AND `NomeCategoria1` = `old_nome_padre`;
						END IF;
					END IF;
			END IF;
			set var_compara_nome = null;
		END IF;
	END IF;
	IF var_compara_nome IS NOT NULL THEN #chiave trovata al primo livello!
		IF `new_nome_categoria` IS NULL OR `new_nome_categoria` = '' THEN
			signal sqlstate '45004'
			set message_text = "Non si può aggiornare a valore nullo il nome di una categoria.";
		END IF;
		UPDATE `Categoria1` set `Nome` = `new_nome_categoria` WHERE `Nome` = `old_nome_categoria`;
	END IF;
	COMMIT;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cancellazione_categoria
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`cancellazione_categoria`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `cancellazione_categoria`(in nome_categoria varchar(20))
BEGIN
	declare var_compara_nome varchar(20);
	declare exit handler for sqlexception
	BEGIN
		rollback;
		resignal;
	END;
	start transaction;
    SELECT `Categoria` FROM `oggettoAllAsta` WHERE `Categoria` = `nome_categoria` AND `Scadenza` > current_timestamp() INTO var_compara_nome;
    IF var_compara_nome IS NOT NULL THEN
		signal sqlstate '45002'
		set message_text = "Non si può eliminare una categoria a cui afferisce un oggetto correntemente all"asta.";
	END IF;
	SELECT `Nome` FROM `Categoria1` WHERE `Nome` = `nome_categoria` INTO var_compara_nome;
	IF var_compara_nome IS NULL THEN
		SELECT `Nome` FROM `Categoria2` WHERE `Nome` = `nome_categoria` INTO var_compara_nome;
		IF var_compara_nome IS NULL THEN
			SELECT `Nome` FROM `Categoria3` WHERE `Nome` = `nome_categoria` INTO var_compara_nome;
			IF var_compara_nome IS NULL THEN
				signal sqlstate '45002'
				set message_text = "Questa categoria non esiste.";
			END IF;
			IF var_compara_nome IS NOT NULL THEN
				DELETE FROM `Categoria3` WHERE `Nome` = `nome_categoria`;
			END IF;
		END IF;
		IF var_compara_nome IS NOT NULL THEN
			DELETE FROM `Categoria2` WHERE `Nome` = `nome_categoria`;
		END IF;
	END IF;
	IF var_compara_nome IS NOT NULL THEN
		DELETE FROM `Categoria1` WHERE `Nome` = `nome_categoria`;
	END IF;
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure inizializzazione_asta
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`inizializzazione_asta`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `inizializzazione_asta`(in nome_ogg varchar(20), in cat varchar(20), in descrizione_ogg longtext, in stato_ogg varchar(30), in color_ogg varchar(20), in espositore_ogg char(20), in dim varchar(20), in prezzo_base decimal(7,2), in scad_asta int)
BEGIN
	declare exit handler for sqlexception
	BEGIN
		rollback;
		resignal;
	END;
	start transaction;
    
    IF nome_ogg = '' THEN
		signal sqlstate '45008'
		set message_text = "Attenzione: Non è specificato il nome dell"oggetto.";
	END IF;
	IF (`scad_asta` < 1 OR `scad_asta`> 7 ) THEN
		signal sqlstate '45008'
		set message_text = "Attenzione: L"asta puo avere durata da un minimo di 1 a un massimo di 7 giorni.";
	END IF;
    IF `stato_ogg` = '' THEN
		signal sqlstate '45009'
		set message_text = "Attenzione: Non è specificato lo stato dell"oggetto.";
	END IF;
	IF `cat` IS NOT NULL THEN
		INSERT INTO `oggettoAllAsta`(`Nome`,`Categoria`,`Descrizione`,`Stato`,`Colore`,`Espositore`, `Dimensioni`,`PrezzoBase`,`Scadenza`,`MAXOfferta`) values (`nome_ogg`,`cat`,`descrizione_ogg`,`stato_ogg`,`color_ogg`,`espositore_ogg`, `dim`,`prezzo_base`, DATE_ADD(NOW(), interval scad_asta day), '0');
	END IF;
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure inserimento_categoria1
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`inserimento_categoria1`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `inserimento_categoria1`(in nome_categoria varchar(20))
BEGIN
	declare var_compara_nome varchar(20);
	declare exit handler for sqlexception
	BEGIN
		rollback;
		resignal;
	END;
	start transaction;
    
	IF nome_categoria = '' THEN
		signal sqlstate '45001'
		set message_text = "Categoria non specificata.";
	END IF;
    
    # controlla se esiste gia la categoria
    SELECT `Nome` FROM `Categoria1` WHERE `Nome` = `nome_categoria` INTO var_compara_nome;
	IF var_compara_nome IS NOT NULL THEN
		signal sqlstate '45001'
		set message_text = "Categoria gia esistente.";
	END IF;
	INSERT INTO `Categoria1`(`Nome`) values (`nome_categoria`);
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure inserimento_categoria2
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`inserimento_categoria2`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `inserimento_categoria2`(in nome_categoria varchar(20), in padre_categoria varchar(20))
BEGIN
	declare var_compara_nome varchar(20);
	declare var_compara_nome_padre varchar(20);
	declare exit handler for sqlexception
	
    BEGIN
		rollback;
		resignal;
	END;
	start transaction;

	IF nome_categoria = '' OR padre_categoria = '' THEN
		signal sqlstate '45001'
		set message_text = "Categoria/e non specificata/e.";
	END IF;
	
	# controlla se esiste gia la categoria
	SELECT `Nome` FROM `Categoria2` WHERE `Nome` = `nome_categoria` INTO var_compara_nome;
	
    IF var_compara_nome IS NOT NULL THEN
		signal sqlstate '45001'
		set message_text = "Categoria gia esistente.";
	END IF;
	IF `padre_categoria` IS NULL THEN
		INSERT INTO `Categoria2`(`Nome`) values (`nome_categoria`);
	END IF;
	IF `padre_categoria` IS NOT NULL THEN
		SELECT `Nome` FROM `Categoria1` WHERE `Nome` = `padre_categoria` INTO var_compara_nome_padre;

	# se non esiste questa categoria-padre viene mostrato un messaggio di errore
	IF var_compara_nome_padre IS NULL THEN
		signal sqlstate '45007'
		set message_text = "Attenzione, non esiste la categoria padre indicata al livello 1 del titolario!";
	END IF;
		INSERT INTO `Categoria2`(`Nome`,`NomeCategoria1`) values (`nome_categoria`,`padre_categoria`);
	END IF;
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure inserimento_categoria3
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`inserimento_categoria3`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `inserimento_categoria3`(in nome_categoria varchar(20), in padre_categoria varchar(20))
BEGIN
	declare var_compara_nome varchar(20);
	declare var_compara_nome_padre varchar(20);
	declare exit handler for sqlexception
	
    BEGIN
		rollback;
		resignal;
	END;
	start transaction;
    
    IF nome_categoria = '' OR padre_categoria = '' THEN
		signal sqlstate '45001'
		set message_text = "Categoria/e non specificata/e.";
	END IF;
    
    #controlla se la categoria è già esistente
	SELECT `Nome` FROM `Categoria3` WHERE `Nome` = `nome_categoria` INTO var_compara_nome;
	IF var_compara_nome IS NOT NULL THEN
		signal sqlstate '45001'
		set message_text = "Categoria gia esistente.";
	END IF;
	IF `padre_categoria` IS NULL THEN
		INSERT INTO `Categoria3`(`Nome`) values (`nome_categoria`);
	END IF;
	IF `padre_categoria` IS NOT NULL THEN
		SELECT `Nome` FROM `Categoria2` WHERE `Nome` = `padre_categoria` INTO var_compara_nome_padre;
	
    # se non esiste questa categoria-padre viene mostrato un messaggio di errore
		IF var_compara_nome_padre IS NULL THEN
			signal sqlstate '45007'
			set message_text = "Attenzione, non esiste la categoria padre indicata al livello 2 del titolario!";
		END IF;
		INSERT INTO `Categoria3`(`Nome`,`NomeCategoria2`) values (`nome_categoria`,`padre_categoria`);
	END IF;
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure registra_offerta
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`registra_offerta`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `registra_offerta`(in cf_offerente char(20), in oggetto_asta int(11), in importo_rilancio float(7,2), in importo_controfferta_max float (7,2) )
BEGIN
    declare scadenza_asta timestamp;
	declare ultimo_offerente char(20);
    declare var_importo_controff float(7,2);
    declare var_compara_offerta float(7,2);
	declare var_resto float(7,2);
    
    declare var_offerta_max float(5,2);
	declare var_miglior_offerente char(20);
    declare var_importo_controff_max float(7,2);
    
	declare exit handler for sqlexception
	BEGIN
		rollback;
		resignal;
	END;
    
    set transaction isolation level SERIALIZABLE;
    
	start transaction;
	SELECT `Scadenza` FROM `oggettoAllAsta` WHERE `ID` = oggetto_asta INTO scadenza_asta;
	IF scadenza_asta < current_timestamp() THEN
		signal sqlstate '45017'
		set message_text = "Asta conclusa. Oggetto aggiudicato. Non è possibile rilanciare offerte!";
	END IF;
	
    #controllo sull'ultimo offerente dell'asta in questione
	SELECT `MigliorOfferente` FROM `oggettoAllAsta` WHERE `ID` = `oggetto_asta` INTO ultimo_offerente;
	IF ultimo_offerente = `cf_offerente` THEN
		signal sqlstate '45016'
		set message_text = "Attenzione: non è possibile rilanciare la propria offerta!";
	END IF;
	IF `importo_controfferta_max` IS NULL THEN
		set var_importo_controff = 0.00;
	END IF;
	IF `importo_controfferta_max` IS NOT NULL THEN
		set var_importo_controff = `importo_controfferta_max`;
	END IF;
	IF `importo_rilancio` IS NULL THEN
		signal sqlstate '45013'
		set message_text = "Attenzione, non è stato indicato un importo di rilancio sull"asta!";
	END IF;
    
    SELECT MOD(`importo_rilancio`, 0.5) INTO var_resto;
	IF var_resto <> 0 THEN
		signal sqlstate '45013'
		set message_text = "Attenzione, la granularità di incremento deve essere di 0.5 centesimi per ogni offerta!";
	END IF;
	
    #controllo che l"importo di rilancio sia maggiore dell"attuale offerta massima
	SELECT `MaxOfferta` FROM `oggettoAllAsta` WHERE `ID` = `oggetto_asta` INTO var_compara_offerta;
	IF var_compara_offerta IS NOT NULL THEN #se esiste già sull"oggetto all"asta un"offerta massima
		IF `importo_rilancio` <= var_compara_offerta THEN
			signal sqlstate '45012'
			set message_text = "Attenzione, l"importo dell"offerta non è sufficiente a rilanciare l"offerta massima precedente";
        END IF;
		INSERT INTO `offerta`(`Utente`,`Oggetto`,`Importo`,`ImportoControfferta`) values (`cf_offerente`,`oggetto_asta`,`importo_rilancio`, var_importo_controff);
       
        #controllo che non ci sia un altro utente con un importo di controfferta maggiore dell"offerta attuale
    
		SELECT `MaxOfferta`, `MigliorOfferente`, `ImportoControffertaMax` FROM `oggettoAllAsta` WHERE `ID` = `oggetto_asta` INTO var_offerta_max, var_miglior_offerente, var_importo_controff_max;
        IF var_importo_controff_max > `importo_controfferta_max` + 0.5 AND var_importo_controff_max > `importo_rilancio`- var_offerta_max AND var_importo_controff_max > `importo_rilancio` AND var_importo_controff_max IS NOT NULL THEN
			INSERT INTO `offerta`(`Utente`,`Oggetto`,`Importo`,`Automatica`,`ImportoControfferta`) values (var_miglior_offerente,`oggetto_asta`,`importo_rilancio` +0.5,'1',var_importo_controff_max-((`importo_rilancio`- var_offerta_max)+0.5));
			UPDATE `oggettoAllAsta` set `NOfferte` = `NOfferte` + 2, `Maxofferta` = `Maxofferta` + (`importo_rilancio` -  var_offerta_max)+0.5,`ImportoControffertaMax` = var_importo_controff_max-((`importo_rilancio`- var_offerta_max)+0.5)
			WHERE `ID` = `oggetto_asta`;
		ELSE
			UPDATE `oggettoAllAsta` set `NOfferte` = `NOfferte` + 1, `Maxofferta` = `importo_rilancio`, `MigliorOfferente` = `cf_offerente`, `ImportoControffertaMax` = var_importo_controff
			WHERE `ID` = `oggetto_asta`;
        END IF;
	END IF;
    
	IF var_compara_offerta IS NULL THEN #se questa è la prima offerta sull'oggetto all'asta
	
    #controllo che l'importo di rilancio non sia nullo e che sia maggiore dell'attuale offerta massima
	SELECT `PrezzoBase` FROM `oggettoAllAsta` WHERE `ID` = `oggetto_asta`
	INTO var_compara_offerta;
	IF `importo_rilancio` <= var_compara_offerta THEN
		signal sqlstate '45012'
		set message_text = "Attenzione, l"importo dell"offerta non è sufficiente a rilanciare l"offerta massima precedente";
	END IF;
	INSERT INTO `offerta`(`Utente`,`Oggetto`,`Importo`,`ImportoControfferta`) values (`cf_offerente`,`oggetto_asta`,`importo_rilancio`,var_importo_controff);
	UPDATE `oggettoAllAsta` set `NOfferte` = `NOfferte` + 1, `Maxofferta` = `importo_rilancio`, `MigliorOfferente` = `cf_offerente`, `ImportoControffertaMax` = var_importo_controff
	WHERE `ID` = `oggetto_asta`;
	END IF;
	COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure registrazione_utente_amm
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`registrazione_utente_amm`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `registrazione_utente_amm`(in cf char(16), in nome_utente varchar(20), in cognome_utente varchar(20), in psw varchar(30))
BEGIN
	INSERT INTO `utenteAmministratore`(`CF`,`Nome`,`Cognome`) values (`cf`,`nome_utente`,`cognome_utente`);
	INSERT INTO `login`(`CF`,`psw`,`user`) values (`cf`,`psw`,'amministratore');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure registrazione_utente_base
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`registrazione_utente_base`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `registrazione_utente_base`(in cf char(16), in nome_utente varchar(20), in cognome_utente varchar(20), in birth date, in birth_place varchar(20), in num_carta char(16), in scad_carta char(16), in cvv char(3), in indirizzo_consegna varchar(30), in psw varchar(30))
BEGIN
	INSERT INTO `utenteBase`(`CF`,`Nome`,`Cognome`,`DataNascita`,`CittaNascita`, `NCarta`, `ScadenzaCarta`, `CVV`, `IndirizzoConsegna`) values (`cf`,`nome_utente`,`cognome_utente`,`birth`,`birth_place`,`num_carta`,`scad_carta`,`cvv`, `indirizzo_consegna`);
	INSERT INTO `login`(`CF`,`psw`,`user`) values (`cf`,`psw`,'base');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure report_asta
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`report_asta`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `report_asta`(in id_asta int)
BEGIN

	set transaction READ ONLY;
	set transaction isolation level READ COMMITTED;
	
	SELECT `Utente`, `Importo`, `Istante`, `Automatica`
	FROM `oggettoAllAsta` JOIN `offerta` ON `Oggetto` = `ID`
	WHERE`Oggetto` = id_asta
	ORDER BY `Importo` DESC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure validazione_accesso
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`validazione_accesso`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `validazione_accesso`(in var_cf char(30), in var_psw varchar(30), out var_user INT)
BEGIN
	declare var_user_role ENUM('amministratore', 'base');

    set transaction isolation level REPEATABLE READ;
    
    SELECT `user` FROM `login` WHERE `CF` = var_cf AND `psw` = var_psw INTO var_user_role;
    IF var_user_role = 'amministratore' THEN SET var_user = 0;
    ELSEIF var_user_role = 'base' THEN SET var_user = 1;
    ELSE SET var_user = 2;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizza_aste_attive
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`visualizza_aste_attive`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `visualizza_aste_attive`()
BEGIN
	
    set transaction READ ONLY;
	set transaction isolation level READ COMMITTED;
	
	SELECT `ID`, `Nome`, `Espositore`, `MAXOfferta`
	FROM `oggettoAllAsta` WHERE (Scadenza > current_timestamp());
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizza_aste_per_categoria
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`visualizza_aste_per_categoria`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `visualizza_aste_per_categoria`(in categoria varchar(20))
BEGIN
	declare var_categoria varchar(20);
	set var_categoria = concat( "%", categoria, "%");
    
    set transaction READ ONLY;
	set transaction isolation level READ COMMITTED;
	
    SELECT `ID`, aste.`Nome`, Categoria, `MaxOfferta`
	FROM `oggettoAllAsta` AS aste
	LEFT JOIN `Categoria3` AS cat3 ON aste.`Categoria` = cat3.`Nome`
	LEFT JOIN `Categoria2` AS cat2 ON cat3.`NomeCategoria2` = cat2.`Nome`
	LEFT JOIN `Categoria1` AS cat1 ON cat2.`NomeCategoria1` = cat1.`Nome`
	WHERE (Scadenza > current_timestamp()) AND (cat3.`Nome` like var_categoria OR cat2.`Nome` like var_categoria OR cat1.`Nome` like var_categoria);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizza_aste_per_espositore
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`visualizza_aste_per_espositore`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `visualizza_aste_per_espositore`(in var_espositore char(20))
BEGIN

	set transaction READ ONLY;
	set transaction isolation level READ COMMITTED;

	SELECT `Espositore`, `ID`, `Nome`, `Categoria`, `MaxOfferta`, `Scadenza`
	FROM `oggettoAllAsta`
	WHERE `Espositore` = var_espositore
    ORDER BY `ID` ASC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizza_aste_per_nome_oggetto
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`visualizza_aste_per_nome_oggetto`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `visualizza_aste_per_nome_oggetto`(in nomeoggetto varchar(20))
BEGIN

	declare var_nomeoggetto varchar(20);
	set var_nomeoggetto = concat( "%", nomeoggetto, "%");
    
    set transaction READ ONLY;
	set transaction isolation level READ COMMITTED;
    
	SELECT `ID`, `Nome`, `Espositore`, `MAXOfferta`
    FROM `oggettoAllAsta` 
    WHERE (`Scadenza` > current_timestamp()) AND `Nome` like  var_nomeoggetto;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizza_oggetti_aggiudicati
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`visualizza_oggetti_aggiudicati`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `visualizza_oggetti_aggiudicati`(in utente char(16))
BEGIN

	set transaction READ ONLY;
	set transaction isolation level READ COMMITTED;
    
	SELECT `Nome`, `Descrizione`, `MaxOfferta`, `Scadenza`
	FROM `oggettoAllAsta`
	WHERE `MigliorOfferente` = utente AND `Scadenza` < current_timestamp();
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizza_partecipazione_aste
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`visualizza_partecipazione_aste`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `visualizza_partecipazione_aste`(in utente char(16))
BEGIN

	set transaction READ ONLY;
	set transaction isolation level READ COMMITTED;
    
	SELECT DISTINCT `ID`, `Nome`, `Descrizione`, `Scadenza`
	FROM`offerta` USE INDEX (utente_base_idx)
	JOIN `oggettoAllAsta` ON `Oggetto` = `ID`
	WHERE `Utente` = `utente`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizza_stato_asta
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`visualizza_stato_asta`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `visualizza_stato_asta`(in asta_id int)
BEGIN

	set transaction READ ONLY;
	set transaction isolation level READ COMMITTED;
    
	SELECT `Espositore`, `Nome`, `Descrizione`, `Categoria`, `Stato`, `Colore`, `Dimensioni`, `NOfferte`, `MAXOfferta`, `Scadenza`
	FROM `oggettoAllAsta`
    WHERE (`ID` = asta_id);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure visualizzazione_titolario_gerarchico
-- -----------------------------------------------------

USE `sistemaAsteOnline`;
DROP procedure IF EXISTS `sistemaAsteOnline`.`visualizzazione_titolario_gerarchico`;

DELIMITER $$
USE `sistemaAsteOnline`$$
CREATE PROCEDURE `visualizzazione_titolario_gerarchico`()
BEGIN

	set transaction READ ONLY;
	set transaction isolation level READ COMMITTED;

	SELECT t_low.`Nome` AS Categoria3, t_low.`Padre` AS Categoria2, t_up.`Padre` AS Categoria1
	FROM `titolario_gerarchico_lower` AS t_low LEFT JOIN `titolario_gerarchico_upper` AS t_up
	ON t_low.`Padre` = t_up.`Nome`
	GROUP BY t_up.`Padre`, t_low.`Padre`, t_low.`Nome`
	UNION
	SELECT t_low.`Nome` AS Categoria3, t_low.`Padre` AS Categoria2, t_up.`Padre` AS Categoria1
	FROM `titolario_gerarchico_lower` AS t_low RIGHT JOIN `titolario_gerarchico_upper` AS t_up
	ON t_low.`Padre` = t_up.`Nome`
	GROUP BY t_up.`Padre`, t_low.`Padre`, t_low.`Nome`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `sistemaAsteOnline`.`titolario_gerarchico_lower`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistemaAsteOnline`.`titolario_gerarchico_lower`;
DROP VIEW IF EXISTS `sistemaAsteOnline`.`titolario_gerarchico_lower` ;
USE `sistemaAsteOnline`;
CREATE  OR REPLACE VIEW `sistemaAsteOnline`.`titolario_gerarchico_lower` (Nome, Padre) AS SELECT c3.Nome AS Nome, c2.Nome AS Padre FROM (Categoria3 AS c3 LEFT JOIN Categoria2 AS c2 ON((c3.NomeCategoria2 = c2.Nome))) GROUP BY c2.Nome, c3.Nome UNION SELECT c3.Nome AS Nome, c2.Nome AS Padre FROM (Categoria2 AS c2 LEFT JOIN Categoria3 AS c3 ON((c3.NomeCategoria2 = c2.Nome))) GROUP BY c2.Nome, c3.Nome;

-- -----------------------------------------------------
-- View `sistemaAsteOnline`.`titolario_gerarchico_upper`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sistemaAsteOnline`.`titolario_gerarchico_upper`;
DROP VIEW IF EXISTS `sistemaAsteOnline`.`titolario_gerarchico_upper` ;
USE `sistemaAsteOnline`;
CREATE  OR REPLACE VIEW `sistemaAsteOnline`.`titolario_gerarchico_upper` (Nome, Padre) AS SELECT c2.Nome AS Nome, c1.Nome AS Padre FROM (Categoria2 AS c2 LEFT JOIN Categoria1 AS c1 ON((c2.NomeCategoria1 = c1.Nome))) GROUP BY c1.Nome, c2.Nome UNION SELECT c2.Nome AS Nome, c1.Nome AS Padre FROM (Categoria1 AS c1 LEFT JOIN Categoria2 AS c2 ON((c2.NomeCategoria1 = c1.Nome))) GROUP BY c1.Nome, c2.Nome

/*CREATE ALGORITHM=UNDEFINED DEFINER=`derrik98`@`localhost` SQL SECURITY DEFINER VIEW `sistemaAsteOnline`.`titolario_gerarchico_upper` (`Nome`,`Padre`) AS select `c2`.`Nome` AS `Nome`,`c1`.`Nome` AS `Padre` from (`sistemaAsteOnline`.`Categoria2` `c2` left join `sistemaAsteOnline`.`Categoria1` `c1` on((`c2`.`NomeCategoria1` = `c1`.`Nome`))) group by `c1`.`Nome`,`c2`.`Nome` union select `c2`.`Nome` AS `Nome`,`c1`.`Nome` AS `Padre` from (`sistemaAsteOnline`.`Categoria1` `c1` left join `sistemaAsteOnline`.`Categoria2` `c2` on((`c2`.`NomeCategoria1` = `c1`.`Nome`))) group by `c1`.`Nome`,`c2`.`Nome`*/;
USE `sistemaAsteOnline`;

DELIMITER $$

USE `sistemaAsteOnline`$$
DROP TRIGGER IF EXISTS `sistemaAsteOnline`.`oggettoAllAsta_BEFORE_INSERT` $$
USE `sistemaAsteOnline`$$
CREATE TRIGGER `sistemaAsteOnline`.`oggettoAllAsta_BEFORE_INSERT` 
BEFORE INSERT ON `oggettoAllAsta`
FOR EACH ROW
BEGIN
	DECLARE var_categoria varchar(40);
    SELECT Nome FROM Categoria3 WHERE Nome = NEW.Categoria INTO var_categoria;
    IF var_categoria IS NULL THEN
    INSERT INTO Categoria3(Nome,NomeCategoria2) VALUES (NEW.Categoria,NULL);
    END IF;
END$$


DELIMITER ;
SET SQL_MODE = '';
DROP USER IF EXISTS utentebase;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'utentebase' IDENTIFIED BY 'Utentebase!0';

GRANT EXECUTE ON procedure `sistemaAsteOnline`.`registra_offerta` TO 'utentebase';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`visualizza_aste_attive` TO 'utentebase';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`visualizza_aste_per_categoria` TO 'utentebase';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`visualizza_aste_per_espositore` TO 'utentebase';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`visualizza_aste_per_nome_oggetto` TO 'utentebase';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`visualizza_stato_asta` TO 'utentebase';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`visualizza_oggetti_aggiudicati` TO 'utentebase';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`visualizza_partecipazione_aste` TO 'utentebase';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`registrazione_utente_base` TO 'utentebase';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`visualizzazione_titolario_gerarchico` TO 'utentebase';
SET SQL_MODE = '';
DROP USER IF EXISTS utenteamm;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'utenteamm' IDENTIFIED BY 'Utenteamm!0';

GRANT INSERT ON TABLE `sistemaAsteOnline`.`oggettoAllAsta` TO 'utenteamm';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`aggiornamento_categoria` TO 'utenteamm';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`cancellazione_categoria` TO 'utenteamm';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`inizializzazione_asta` TO 'utenteamm';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`inserimento_categoria1` TO 'utenteamm';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`inserimento_categoria2` TO 'utenteamm';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`inserimento_categoria3` TO 'utenteamm';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`report_asta` TO 'utenteamm';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`visualizzazione_titolario_gerarchico` TO 'utenteamm';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`visualizza_aste_per_espositore` TO 'utenteamm';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`visualizza_stato_asta` TO 'utenteamm';
GRANT EXECUTE ON procedure `sistemaAsteOnline`.`registrazione_utente_amm` TO 'utenteamm';
GRANT UPDATE, SELECT, INSERT, DELETE ON TABLE `sistemaAsteOnline`.`Categoria1` TO 'utenteamm';
GRANT UPDATE, SELECT, INSERT, DELETE ON TABLE `sistemaAsteOnline`.`Categoria2` TO 'utenteamm';
GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE `sistemaAsteOnline`.`Categoria3` TO 'utenteamm';
SET SQL_MODE = '';
DROP USER IF EXISTS login;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'login' IDENTIFIED BY 'Login!00';

GRANT EXECUTE ON procedure `sistemaAsteOnline`.`validazione_accesso` TO 'login';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
